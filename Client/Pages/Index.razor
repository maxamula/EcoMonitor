@page "/"
@using EcoMonitor.Shared;
@using ExcelDataReader;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Http
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.InPlaceEditor
@using System.Net.Http.Json
@using System.Collections.ObjectModel
@using System.Text;

@inject IJSRuntime JsRuntime

<PageTitle>Home - EcoMonitor</PageTitle>

<style>
    html{
        user-select: none;
    }

    .uploader{
        height: 100%;
    }
</style>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="./css/tailwind.output.css" />
<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" defer></script>


<main class="h-full overflow-y-auto">
    <div class="container px-6 mx-auto grid">
	<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200"> Home </h2>
	<!-- Cards -->
	<div class="grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4">
		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-orange-500 bg-orange-100 rounded-full dark:text-orange-100 dark:bg-orange-500"> <img width="30" height="30" src="https://img.icons8.com/external-flaticons-flat-flat-icons/30/external-factory-oil-gas-flaticons-flat-flat-icons.png" alt="external-factory-oil-gas-flaticons-flat-flat-icons" /> </div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"> Total factories </p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200"> @Factories.Count </p>
			</div>
		</div>
		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-green-500 bg-green-100 rounded-full dark:text-green-100 dark:bg-green-500"> <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path
               fill-rule="evenodd"
               d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z"
               clip-rule="evenodd"
               ></path>
         </svg> </div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"> Total tax </p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200"> ₴ - </p>
			</div>
		</div>
		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-blue-500 bg-blue-100 rounded-full dark:text-blue-100 dark:bg-blue-500"> <img width="20" height="20" src="https://img.icons8.com/color/20/leaf.png" alt="leaf" /> </div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"> Total excess </p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200"> @TotalExcess / @Records.Count </p>
			</div>
		</div>
		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-teal-500 bg-teal-100 rounded-full dark:text-teal-100 dark:bg-teal-500"> <img width="25" height="25" src="https://img.icons8.com/external-wanicon-two-tone-wanicon/25/external-factory-food-technology-wanicon-two-tone-wanicon.png" alt="external-factory-food-technology-wanicon-two-tone-wanicon" /> </div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"> Data </p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200"> - </p>
			</div>
		</div>
    </div>



<div class="w-full overflow-hidden rounded-lg shadow-xs">
    <div class="w-full overflow-x-auto">
        <SfGrid TValue="EcoMonitor.Shared.Record" AllowFiltering="true" AllowPaging="true" DataSource="@Records" Toolbar="@(new List<string>() { "Edit", "Delete" })">
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu" ShowFilterBarStatus="true"></GridFilterSettings>
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
            <GridEvents RowDeleted="RowDeleted" RowUpdated="@RowUpdated" TValue="EcoMonitor.Shared.Record"></GridEvents> 
            <GridColumns>
                <GridColumn Visible="false" Field="Id" HeaderText="ID" IsPrimaryKey="true"></GridColumn>
                <GridColumn AllowFiltering="false" AllowEditing="false" Field="Object.ObjectName" HeaderText="Factory" Width="400"></GridColumn>
                <GridColumn AllowFiltering="false" AllowEditing="false" Field="Pollutant.PollutantName" HeaderText="Pollutant"></GridColumn>
                <GridColumn AllowFiltering="false" AllowEditing="false" Field="Pollutant.DangerClass" HeaderText="Danger class"></GridColumn>
                <GridColumn AllowFiltering="false" Field="PollutionValue" HeaderText="Value"></GridColumn>
                <GridColumn AllowFiltering="true" Field="RecordYear" HeaderText="Year">
                </GridColumn>
                <GridColumn HeaderText="Status">
                        <Template>
                                @{
                                    var record = (context as Record);
                                    if(record.PollutionValue > record.Pollutant.MaxAmount)
                                    {
                                        <img width="24" height="24" src="https://cdn-icons-png.flaticon.com/24/463/463612.png" alt="no"/>
                                    }
                                    else
                                    {
                                        <img width="24" height="24" src="https://cdn-icons-png.flaticon.com/24/4315/4315445.png" alt="ok"/>
                                    }
                                }
                        </Template>
                    </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>
        
<br/>
<div class="w-full overflow-hidden rounded-lg shadow-xs" style="background-color: white; padding: 0px 5px;">
<SfMaps Width="100%" Background="transparent">
    <MapsTitleSettings Text="Map of pollutants of the Kyiv region">
        <MapsTitleTextStyle FontFamily="Segoe UI" />
    </MapsTitleSettings>
    <MapsCenterPosition Latitude="50.4501" Longitude="30.5234" />
    <MapsZoomSettings Enable="false" ZoomFactor="10" />
    <MapsLayers>
            <MapsLayer UrlTemplate="https://a.tile.openstreetmap.org/level/tileX/tileY.png" TValue="string">
                <MapsMarkerSettings>
                    <MapsMarker Visible="true" DataSource="@Factories"  TValue="EcoMonitor.Shared.Object">
                        <MarkerTemplate>
                            @{
                                var Data = context as EcoMonitor.Shared.Object;
                                <div>
                                    <img width="25" height="25" src="https://img.icons8.com/color/20/factory.png" alt="factory"/>
                                    <p style="transform: translate(-50%, 0px); text-align: center; overflow: hidden; white-space: nowrap; margin: 0 auto; font-weight: bold; font-size: 12px;">@Data.ObjectName</p>
                                </div>
                             }
                        </MarkerTemplate>
                    </MapsMarker>
                </MapsMarkerSettings>
            </MapsLayer>
        </MapsLayers>
</SfMaps>
</div>
<br/>
<div class="min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
    <h4 class="mb-4 font-semibold text-gray-800 dark:text-gray-300">
        Add record
    </h4>
    <form @onsubmit="HandleAddRecord">
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-600 dark:text-gray-400">
            Factory
        </label>
        <select name="Object" @bind="AddRecordData.ObjectId" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        @{
                            foreach(var factory in Factories)
                            {
                                <option value="@factory.Id">@factory.ObjectName</option>
                            }
                        }
        </select>
        </div>


    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-600 dark:text-gray-400">
            Pollutant
        </label>
        <select name="pollutionType" @bind="AddRecordData.PollutantId" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            @{
                foreach (var pollutant in Pollutants)
                {
                    <option value="@pollutant.Id">@pollutant.PollutantName</option>
                }
            }
        </select>
    </div>

        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-600 dark:text-gray-400">
                Pollution
            </label>
            <input type="number" @bind="AddRecordData.Value" step="0.0001" name="pollutionValue" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
        </div>

        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-600 dark:text-gray-400">
                Year
            </label>
            <input type="number" @bind="AddRecordData.Year" name="recordYear" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required>
        </div>

        <button type="submit" class="inline-flex items-center px-4 py-2 border transition duration-150 ease-in-out" style="border-radius: 8px;">
            Submit
        </button>
    </form>
</div>

<!-- Export -->
<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Quick import
</h2>
<div class="min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
    <SfUploader ID="UploadFiles" AutoUpload="true" SequentialUpload="false" AllowMultiple="false" AllowedExtensions=".xls, .xlsx">
        <UploaderAsyncSettings SaveUrl="api/pollution/uploadImport"/>
        <UploaderEvents BeforeUpload="OnUploadStart" Success="OnUploadSuccess"/>
    </SfUploader>
</div>
    <!-- Charts -->
    <h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
        Extra
    </h2>
    <div class="grid gap-6 mb-8 md:grid-cols-2">
        <div class="min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
            <h4 class="mb-4 font-semibold text-gray-800 dark:text-gray-300">
                Data
            </h4>
            <div class="flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400">


            </div>
        </div>
        <div class="min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
            <h4 class="mb-4 font-semibold text-gray-800 dark:text-gray-300">
                Data
            </h4>
            <div style="height:80%;">

            </div>
        </div>
    </div>
</div>
</main>


@code {
    int TotalExcess
    {
        get
        {
            if(Records != null)
            {
                int total = 0;
                foreach (var record in Records)
                    if (record.PollutionValue > record.Pollutant.MaxAmount)
                        total++;
                return total;
            }
            return 0;
        }
    }

    PostMessageAddRecord AddRecordData { get; set; } = new PostMessageAddRecord();

    ObservableCollection<EcoMonitor.Shared.Record> Records { get; set; } = new ObservableCollection<Record>();
    ObservableCollection<EcoMonitor.Shared.Object> Factories { get; set; } = new ObservableCollection<EcoMonitor.Shared.Object>();
    ObservableCollection<EcoMonitor.Shared.Pollutant> Pollutants { get; set; } = new ObservableCollection<Pollutant>();

    HttpClient http = new HttpClient() { BaseAddress = new System.Uri("http://localhost:5212/") };


    protected override async Task OnInitializedAsync() => await Update();

    private async Task Update()
    {
        try
        {
            Records = new ObservableCollection<EcoMonitor.Shared.Record>(await http.GetFromJsonAsync<List<EcoMonitor.Shared.Record>>($"api/pollution/records"));
            Factories = new ObservableCollection<EcoMonitor.Shared.Object>(await http.GetFromJsonAsync<List<EcoMonitor.Shared.Object>>($"api/pollution/objects"));
            Pollutants = new ObservableCollection<EcoMonitor.Shared.Pollutant>(await http.GetFromJsonAsync<List<EcoMonitor.Shared.Pollutant>>($"api/pollution/pollutants"));

            AddRecordData = new PostMessageAddRecord() { ObjectId = Factories.FirstOrDefault().Id, PollutantId = Pollutants.FirstOrDefault().Id, Value = 100.0f, Year = 2022 };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    public async Task RowUpdated(RowUpdatedEventArgs<EcoMonitor.Shared.Record> Args)
    {
        await http.PostAsync("api/pollution/updaterecord", new StringContent(JsonConvert.SerializeObject(new { id = Args.Data.Id, value = Args.Data.PollutionValue, year = Args.Data.RecordYear }), Encoding.UTF8, "application/json"));
    }

    public async Task RowDeleted(RowDeletedEventArgs<EcoMonitor.Shared.Record> Args)
    {
        await http.PostAsJsonAsync<int>("api/pollution/deleterecord", Args.Datas[0].Id);
    }

    private async Task HandleAddRecord()
    {
        await http.PostAsync("api/pollution/addrecord", new StringContent(JsonConvert.SerializeObject(AddRecordData), Encoding.UTF8, "application/json"));
        await Update();
    }


    private async Task OnUploadSuccess(SuccessEventArgs args) => await Update();
    private async Task OnUploadStart(BeforeUploadEventArgs args)
    {
        try
        {
            int year = int.Parse(await JsRuntime.InvokeAsync<string>("prompt", "Record year:"));
            args.CustomFormData = new List<object> { new { Year = year } };
            args.CurrentRequest = new List<object> { new { Year = year } };
        }
        catch 
        { 
            args.Cancel = true; 
            return; 
        }
    }
}